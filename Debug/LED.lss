
LED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000027e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000022a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000027e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002b0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a34  00000000  00000000  00000350  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007e7  00000000  00000000  00000d84  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000428  00000000  00000000  0000156b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e8  00000000  00000000  00001994  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f5  00000000  00000000  00001a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000043a  00000000  00000000  00001e71  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  000022ab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 cc 00 	call	0x198	; 0x198 <main>
  78:	0c 94 13 01 	jmp	0x226	; 0x226 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <delay_ms>:
		return 255 - (255 * (0)); //error - wrong value -> pwm 0%
	}
	else {
		return 255 - ((255 * PWM) / 100);
	}
}
  80:	20 e0       	ldi	r18, 0x00	; 0
  82:	30 e0       	ldi	r19, 0x00	; 0
  84:	08 c0       	rjmp	.+16     	; 0x96 <delay_ms+0x16>
  86:	ef e9       	ldi	r30, 0x9F	; 159
  88:	ff e0       	ldi	r31, 0x0F	; 15
  8a:	31 97       	sbiw	r30, 0x01	; 1
  8c:	f1 f7       	brne	.-4      	; 0x8a <delay_ms+0xa>
  8e:	00 c0       	rjmp	.+0      	; 0x90 <delay_ms+0x10>
  90:	00 00       	nop
  92:	2f 5f       	subi	r18, 0xFF	; 255
  94:	3f 4f       	sbci	r19, 0xFF	; 255
  96:	82 17       	cp	r24, r18
  98:	93 07       	cpc	r25, r19
  9a:	ac f7       	brge	.-22     	; 0x86 <delay_ms+0x6>
  9c:	08 95       	ret

0000009e <PWM_init>:
  9e:	8a b1       	in	r24, 0x0a	; 10
  a0:	80 62       	ori	r24, 0x20	; 32
  a2:	8a b9       	out	0x0a, r24	; 10
  a4:	8a b1       	in	r24, 0x0a	; 10
  a6:	80 64       	ori	r24, 0x40	; 64
  a8:	8a b9       	out	0x0a, r24	; 10
  aa:	84 b5       	in	r24, 0x24	; 36
  ac:	83 6f       	ori	r24, 0xF3	; 243
  ae:	84 bd       	out	0x24, r24	; 36
  b0:	85 b5       	in	r24, 0x25	; 37
  b2:	81 60       	ori	r24, 0x01	; 1
  b4:	85 bd       	out	0x25, r24	; 37
  b6:	8f ef       	ldi	r24, 0xFF	; 255
  b8:	87 bd       	out	0x27, r24	; 39
  ba:	08 95       	ret

000000bc <increase_PWM>:
//
int increase_PWM(bool *condition, int *i, int PWM_min, int PWM_max, int ms_delay) {
  bc:	8f 92       	push	r8
  be:	9f 92       	push	r9
  c0:	af 92       	push	r10
  c2:	bf 92       	push	r11
  c4:	cf 92       	push	r12
  c6:	df 92       	push	r13
  c8:	ef 92       	push	r14
  ca:	ff 92       	push	r15
  cc:	0f 93       	push	r16
  ce:	1f 93       	push	r17
  d0:	cf 93       	push	r28
  d2:	df 93       	push	r29
  d4:	6c 01       	movw	r12, r24
  d6:	7b 01       	movw	r14, r22
  d8:	4a 01       	movw	r8, r20
	int pwm = 255 - *i;
  da:	db 01       	movw	r26, r22
  dc:	ed 91       	ld	r30, X+
  de:	fc 91       	ld	r31, X
  e0:	cf ef       	ldi	r28, 0xFF	; 255
  e2:	d0 e0       	ldi	r29, 0x00	; 0
  e4:	ce 1b       	sub	r28, r30
  e6:	df 0b       	sbc	r29, r31
	
	if (((*i) <= (255 * PWM_max)/100) && *condition) {
  e8:	4f ef       	ldi	r20, 0xFF	; 255
  ea:	42 9f       	mul	r20, r18
  ec:	c0 01       	movw	r24, r0
  ee:	43 9f       	mul	r20, r19
  f0:	90 0d       	add	r25, r0
  f2:	11 24       	eor	r1, r1
  f4:	64 e6       	ldi	r22, 0x64	; 100
  f6:	70 e0       	ldi	r23, 0x00	; 0
  f8:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <__divmodhi4>
  fc:	5b 01       	movw	r10, r22
  fe:	6e 17       	cp	r22, r30
 100:	7f 07       	cpc	r23, r31
 102:	bc f0       	brlt	.+46     	; 0x132 <increase_PWM+0x76>
 104:	d6 01       	movw	r26, r12
 106:	8c 91       	ld	r24, X
 108:	88 23       	and	r24, r24
 10a:	99 f0       	breq	.+38     	; 0x132 <increase_PWM+0x76>
		(*i)++;
 10c:	31 96       	adiw	r30, 0x01	; 1
 10e:	d7 01       	movw	r26, r14
 110:	ed 93       	st	X+, r30
 112:	fc 93       	st	X, r31
		delay_ms(ms_delay);
 114:	c8 01       	movw	r24, r16
 116:	0e 94 40 00 	call	0x80	; 0x80 <delay_ms>
		if((*i == (255 * PWM_max)/100) && *condition) {
 11a:	f7 01       	movw	r30, r14
 11c:	80 81       	ld	r24, Z
 11e:	91 81       	ldd	r25, Z+1	; 0x01
 120:	a8 16       	cp	r10, r24
 122:	b9 06       	cpc	r11, r25
 124:	59 f5       	brne	.+86     	; 0x17c <increase_PWM+0xc0>
 126:	d6 01       	movw	r26, r12
 128:	8c 91       	ld	r24, X
 12a:	88 23       	and	r24, r24
 12c:	39 f1       	breq	.+78     	; 0x17c <increase_PWM+0xc0>
			*condition = false;
 12e:	1c 92       	st	X, r1
 130:	25 c0       	rjmp	.+74     	; 0x17c <increase_PWM+0xc0>
		}
	}
		
	else if ((*i >= (255 * PWM_min)/100) && !*condition) {
 132:	2f ef       	ldi	r18, 0xFF	; 255
 134:	28 9d       	mul	r18, r8
 136:	c0 01       	movw	r24, r0
 138:	29 9d       	mul	r18, r9
 13a:	90 0d       	add	r25, r0
 13c:	11 24       	eor	r1, r1
 13e:	64 e6       	ldi	r22, 0x64	; 100
 140:	70 e0       	ldi	r23, 0x00	; 0
 142:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <__divmodhi4>
 146:	5b 01       	movw	r10, r22
 148:	e6 17       	cp	r30, r22
 14a:	f7 07       	cpc	r31, r23
 14c:	bc f0       	brlt	.+46     	; 0x17c <increase_PWM+0xc0>
 14e:	d6 01       	movw	r26, r12
 150:	8c 91       	ld	r24, X
 152:	81 11       	cpse	r24, r1
 154:	13 c0       	rjmp	.+38     	; 0x17c <increase_PWM+0xc0>
		(*i)--;
 156:	31 97       	sbiw	r30, 0x01	; 1
 158:	d7 01       	movw	r26, r14
 15a:	ed 93       	st	X+, r30
 15c:	fc 93       	st	X, r31
		delay_ms(ms_delay);
 15e:	c8 01       	movw	r24, r16
 160:	0e 94 40 00 	call	0x80	; 0x80 <delay_ms>
		if((*i == (255 * PWM_min)/100) && !*condition) {
 164:	f7 01       	movw	r30, r14
 166:	80 81       	ld	r24, Z
 168:	91 81       	ldd	r25, Z+1	; 0x01
 16a:	a8 16       	cp	r10, r24
 16c:	b9 06       	cpc	r11, r25
 16e:	31 f4       	brne	.+12     	; 0x17c <increase_PWM+0xc0>
 170:	d6 01       	movw	r26, r12
 172:	8c 91       	ld	r24, X
 174:	81 11       	cpse	r24, r1
 176:	02 c0       	rjmp	.+4      	; 0x17c <increase_PWM+0xc0>
			*condition = true;
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	8c 93       	st	X, r24
		}
	}
	return pwm;
}
 17c:	ce 01       	movw	r24, r28
 17e:	df 91       	pop	r29
 180:	cf 91       	pop	r28
 182:	1f 91       	pop	r17
 184:	0f 91       	pop	r16
 186:	ff 90       	pop	r15
 188:	ef 90       	pop	r14
 18a:	df 90       	pop	r13
 18c:	cf 90       	pop	r12
 18e:	bf 90       	pop	r11
 190:	af 90       	pop	r10
 192:	9f 90       	pop	r9
 194:	8f 90       	pop	r8
 196:	08 95       	ret

00000198 <main>:
#include "lib.h"
#include <stdlib.h>
#include <stdbool.h>
	
int main(void)
{
 198:	cf 93       	push	r28
 19a:	df 93       	push	r29
 19c:	00 d0       	rcall	.+0      	; 0x19e <main+0x6>
 19e:	1f 92       	push	r1
 1a0:	cd b7       	in	r28, 0x3d	; 61
 1a2:	de b7       	in	r29, 0x3e	; 62
	PWM_init(1000);
 1a4:	88 ee       	ldi	r24, 0xE8	; 232
 1a6:	93 e0       	ldi	r25, 0x03	; 3
 1a8:	0e 94 4f 00 	call	0x9e	; 0x9e <PWM_init>
	//2 -> blink
	int mode = 0;
	//variable to increase_PWM function -> setting the start PWM value [%]
	int PWM_start = 20;
	//variable used in increase_PWM function
	bool condition = true;
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	89 83       	std	Y+1, r24	; 0x01
		condition = false;
		i = (255 * PWM_start)/100;
	}
	else {
		condition = true;
		i = (255 * PWM_start)/100;
 1b0:	83 e3       	ldi	r24, 0x33	; 51
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	9b 83       	std	Y+3, r25	; 0x03
 1b6:	8a 83       	std	Y+2, r24	; 0x02
	}
	//main infinite loop
	while (1) {
		switch (mode) {
			case 0: {
				OCR0A = increase_PWM(&condition, &i, PWM_min, PWM_max, ms_delay);
 1b8:	02 e3       	ldi	r16, 0x32	; 50
 1ba:	10 e0       	ldi	r17, 0x00	; 0
 1bc:	28 e2       	ldi	r18, 0x28	; 40
 1be:	30 e0       	ldi	r19, 0x00	; 0
 1c0:	44 e1       	ldi	r20, 0x14	; 20
 1c2:	50 e0       	ldi	r21, 0x00	; 0
 1c4:	be 01       	movw	r22, r28
 1c6:	6e 5f       	subi	r22, 0xFE	; 254
 1c8:	7f 4f       	sbci	r23, 0xFF	; 255
 1ca:	ce 01       	movw	r24, r28
 1cc:	01 96       	adiw	r24, 0x01	; 1
 1ce:	0e 94 5e 00 	call	0xbc	; 0xbc <increase_PWM>
 1d2:	87 bd       	out	0x27, r24	; 39
 1d4:	f1 cf       	rjmp	.-30     	; 0x1b8 <main+0x20>

000001d6 <__divmodhi4>:
 1d6:	97 fb       	bst	r25, 7
 1d8:	07 2e       	mov	r0, r23
 1da:	16 f4       	brtc	.+4      	; 0x1e0 <__divmodhi4+0xa>
 1dc:	00 94       	com	r0
 1de:	07 d0       	rcall	.+14     	; 0x1ee <__divmodhi4_neg1>
 1e0:	77 fd       	sbrc	r23, 7
 1e2:	09 d0       	rcall	.+18     	; 0x1f6 <__divmodhi4_neg2>
 1e4:	0e 94 ff 00 	call	0x1fe	; 0x1fe <__udivmodhi4>
 1e8:	07 fc       	sbrc	r0, 7
 1ea:	05 d0       	rcall	.+10     	; 0x1f6 <__divmodhi4_neg2>
 1ec:	3e f4       	brtc	.+14     	; 0x1fc <__divmodhi4_exit>

000001ee <__divmodhi4_neg1>:
 1ee:	90 95       	com	r25
 1f0:	81 95       	neg	r24
 1f2:	9f 4f       	sbci	r25, 0xFF	; 255
 1f4:	08 95       	ret

000001f6 <__divmodhi4_neg2>:
 1f6:	70 95       	com	r23
 1f8:	61 95       	neg	r22
 1fa:	7f 4f       	sbci	r23, 0xFF	; 255

000001fc <__divmodhi4_exit>:
 1fc:	08 95       	ret

000001fe <__udivmodhi4>:
 1fe:	aa 1b       	sub	r26, r26
 200:	bb 1b       	sub	r27, r27
 202:	51 e1       	ldi	r21, 0x11	; 17
 204:	07 c0       	rjmp	.+14     	; 0x214 <__udivmodhi4_ep>

00000206 <__udivmodhi4_loop>:
 206:	aa 1f       	adc	r26, r26
 208:	bb 1f       	adc	r27, r27
 20a:	a6 17       	cp	r26, r22
 20c:	b7 07       	cpc	r27, r23
 20e:	10 f0       	brcs	.+4      	; 0x214 <__udivmodhi4_ep>
 210:	a6 1b       	sub	r26, r22
 212:	b7 0b       	sbc	r27, r23

00000214 <__udivmodhi4_ep>:
 214:	88 1f       	adc	r24, r24
 216:	99 1f       	adc	r25, r25
 218:	5a 95       	dec	r21
 21a:	a9 f7       	brne	.-22     	; 0x206 <__udivmodhi4_loop>
 21c:	80 95       	com	r24
 21e:	90 95       	com	r25
 220:	bc 01       	movw	r22, r24
 222:	cd 01       	movw	r24, r26
 224:	08 95       	ret

00000226 <_exit>:
 226:	f8 94       	cli

00000228 <__stop_program>:
 228:	ff cf       	rjmp	.-2      	; 0x228 <__stop_program>
